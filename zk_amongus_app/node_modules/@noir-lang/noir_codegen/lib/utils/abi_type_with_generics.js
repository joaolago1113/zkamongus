/**
 * Represents a binding to a generic.
 */
export class BindingId {
    id;
    isNumeric;
    constructor(id, isNumeric) {
        this.id = id;
        this.isNumeric = isNumeric;
    }
}
/**
 * Maps an ABI type to an ABI type with generics.
 * This performs pure type conversion, and does not generate any bindings.
 */
export function mapAbiTypeToAbiTypeWithGenerics(abiType) {
    switch (abiType.kind) {
        case 'field':
        case 'boolean':
        case 'string':
        case 'integer':
            return abiType;
        case 'array':
            return {
                kind: 'array',
                length: abiType.length,
                type: mapAbiTypeToAbiTypeWithGenerics(abiType.type),
            };
        case 'struct': {
            const structType = {
                path: abiType.path,
                fields: abiType.fields.map((field) => ({
                    name: field.name,
                    type: mapAbiTypeToAbiTypeWithGenerics(field.type),
                })),
                generics: [],
            };
            return {
                kind: 'struct',
                structType,
                args: [],
            };
        }
        case 'tuple':
            return {
                kind: 'tuple',
                fields: abiType.fields.map(mapAbiTypeToAbiTypeWithGenerics),
            };
        default: {
            const exhaustiveCheck = abiType;
            throw new Error(`Unhandled abi type: ${exhaustiveCheck}`);
        }
    }
}
/**
 * Finds the structs in an ABI type.
 * This won't explore nested structs.
 */
export function findStructsInType(abiType) {
    switch (abiType.kind) {
        case 'field':
        case 'boolean':
        case 'string':
        case 'integer':
            return [];
        case 'array':
            return findStructsInType(abiType.type);
        case 'tuple':
            return abiType.fields.flatMap(findStructsInType);
        case 'struct':
            return [abiType];
        default: {
            return [];
        }
    }
}
/**
 * Finds all the structs in an ABI type, including nested structs.
 */
export function findAllStructsInType(abiType) {
    let allStructs = [];
    let lastStructs = findStructsInType(abiType);
    while (lastStructs.length > 0) {
        allStructs = allStructs.concat(lastStructs);
        lastStructs = lastStructs.flatMap((struct) => struct.structType.fields.flatMap((field) => findStructsInType(field.type)));
    }
    return allStructs;
}
