{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2784471410325621924,"abi":{"parameters":[{"name":"current_local_user_state","type":{"kind":"struct","path":"UserState","fields":[{"name":"my_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"private_info","type":{"kind":"struct","path":"player_state::PlayerPrivateInfo","fields":[{"name":"role","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"voted_for_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"all_players_public_view","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"player_state::PlayerPublicInfo","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"game_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"section_id","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"visible_sections","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"unsigned","width":32}}}]},"visibility":"private"},{"name":"global_game_state","type":{"kind":"struct","path":"GameState","fields":[{"name":"game_ended","type":{"kind":"boolean"}},{"name":"turn_count","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"all_players_public","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"player_state::PlayerPublicInfo","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"game_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"section_id","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"mpc_state","type":{"kind":"struct","path":"mpclib::selective_disclosure::selective_disclosure::RoundState","fields":[{"name":"round_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"user_encrypt_secret_hashes","type":{"kind":"array","length":3,"type":{"kind":"field"}}},{"name":"user_mask_secret_hashes","type":{"kind":"array","length":3,"type":{"kind":"field"}}},{"name":"previous_output_states","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"mpclib::selective_disclosure::selective_disclosure::UserOutputState","fields":[{"name":"ciphertext","type":{"kind":"struct","path":"mpclib::common::crypto::Ciphertext","fields":[{"name":"data","type":{"kind":"array","length":128,"type":{"kind":"field"}}}]}},{"name":"mask_commitments","type":{"kind":"array","length":64,"type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}}},{"name":"user_updated_mask_commitments","type":{"kind":"array","length":3,"type":{"kind":"array","length":64,"type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}}}}]}}}]}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"UserState","fields":[{"name":"my_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"private_info","type":{"kind":"struct","path":"player_state::PlayerPrivateInfo","fields":[{"name":"role","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"voted_for_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"all_players_public_view","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"player_state::PlayerPublicInfo","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"game_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"section_id","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"visible_sections","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"unsigned","width":32}}}]},"visibility":"private"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13265554733035650515":{"error_kind":"string","string":"BigNum::validate_gt check fails"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7L3djiRLsl73LnN9LsLdzf/4KoIgUCIpECAOBZG6Ivjuyi529p7hZJplsa3dwv377vY5aFRFrAyvNM/xXOu//e3f/fv/8//7v/+P//iv/+E//5e//Zv/7b/97T/95//r3/7X//if//Xxf/23v42rfP0//8v/82//9cf//V/+67/9f//r3/5Nqu1K//K3f/+v/+7Hf/da//u//O0//Mf/9O//9m9a+u//8k//fFy9/PzX4xrj1z/u+b//7//y+B2y4HfUBb+jefyOVOvzd+Qi//Q7+oLfMRb8jvnnf0e6FvyOtOB35AW/oyz4HbLgd9QFv2PBOk8L1nlasM7TgnWeF6zzvGCd5wXrPC9Y53nBOs8L1nlesM7zgnWeF6zzvGCdlwXrvCxY52XBOi8L1nlZsM7LgnVeFqzzsmCdlwXrvCxY57JgncuCdS4L1rksWOeyYJ3LgnUuC9a5LFjnsmCdy4J1Xhes87pgndcF67wuWOd1wTqvC9Z5XbDO64J1Xhes87pgnbcF67wtWOdtwTpvC9Z5W7DO24J13has87ZgnbcF67wtWOd9wTrvC9Z5X7DO+4J13hes875gnfcF67wvWOd9wTrvC9b5WLDOx4J1Phas87FgnY8F63wsWOdjwTofC9b5WLDOx4J1Phes87lgnc8F63wuWOdzwTqfC9b5XLDO54J1Phes8/nn1/m8rgW/Iy34HXnB7ygLfocs+B11we9oC35HX/A7xoLfsWCdLzgPNxech5sLzsPNBefh5oLzcHPBebi54DzcXHAebi44DzcXnIebC87DzQXn4eaC83BzwXm4ueA83FxwHm4uOA83F5yHmwvOw80F5+HmgvNwc8F5uLngPNxccB5uLjgPNxech5sLzsPNBefh5oLzcHPBebi54DzcXHAebi44DzcXnIebC87DzQXn4eaC83BzwXm4ueA83FxwHm4uOA83F5yHmwvOw80F5+HmgvNwc8F5uLngPNxccB5uLjgPNxech5sLzsPNBefh5oLzcHPBebi54DzcXHAebi44DzcXnIebC87DzQXn4eaC83BzwXm4ueA83FxwHm4uOA83F5yHmwvOw80F5+HmgvNwc8F5uLngPNxccB5uLjgPNxech5sLzsPNBefh5oLzcHPBebi54DzcXHAebi44DzcXnIebC87DzQXn4eaC83BzwXm4ueA83FxwHm4u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Za8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PUVl72+4rLXV1z2+orLXl+5xOVRqsujNJdH6S6PMlwexeXsu+z1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvT5x2esTl70+cdnrE5e9PrnE5VGqy6M0l0fpLo8yXB7F5ey77PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXp+47PWJy16fuOz1icten7js9YnLXl912eurLnt91WWvr7rs9dVLXB6lujxKc3mU7vIow+VRXM6+y15fddnrqy57fdVlr6+67PVVl72+6rLXV132+qrLXl912eurLnt91WWvr7rs9VWXvb7qstdXXfb6qsteX3XZ66sue33VZa+vuuz1VZe9vuqy11dd9vqqy15fddnrqy57fdVlr6+67PVVl72+6rLXV132+qrLXl912eurLnt91WWvr7rs9VWXvb7qstdXXfb6qsteX3XZ66sue33VZa+vuuz1VZe9vuqy11dd9vqqy15fddnrqy57fdVlr6+67PVVl72+6rLXV132+qrLXl912eurLnt91WWvr7rs9VWXvb7qstdXXfb6qsteX3XZ66sue33VZa+vuuz1VZe9vuqy11dd9vqqy15fddnrqy57fdVlr6+67PVVl72+6rLXV132+qrLXl912eurLnt91WWvr7rs9VWXvb7qstdXXfb6qsteX3XZ62sue33NZa+vuez1NZe9vnaJy6NUl0dpLo/SXR5luDyKy9l32etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fd1lr6+77PV1l72+7rLX1y9xeZTq8ijN5VG6y6MMl0dxOfsue33dZa+vu+z1dZe9vu6y19dd9vq6y15fd9nr6y57fd1lr6+77PV1l72+7rLX1132+rrLXl932evrLnt93WWvr7vs9XWXvb7ustfXXfb6usteX3fZ6+sue33dZa+vu+z1dZe9vu6y19dd9vq6y15fd9nr6y57fd1lr6+77PV1l72+7rLX1132+rrLXl932evrLnt93WWvr7vs9XWXvb7ustfXXfb6usteX3fZ6+sue33dZa+vu+z1dZe9vu6y19dd9vq6y15fd9nr6y57fd1lr6+77PV1l72+7rLX1132+rrLXl932evrLnt93WWvr7vs9XWXvb7ustfXXfb6usteX3fZ6+sue33dZa+vu+z1dZe9vu6y19dd9vq6y15fd9nr6y57fd1lr6+77PV1l72+7rLX1132+rrLXl932evrLnt93WWvb7js9Q2Xvb7hstc3XPb6xiUuj1JdHqW5PEp3eZTh8iguZ99lr2+47PUNl72+4bLXN1z2+obLXt9w2esbLnt9w2Wvb7js9Q2Xvb7hstc3XPb6hste33DZ6xsue33DZa9vuOz1DZe9vuGy1zdc9vqGy17fcNnrGy57fcNlr2+47PUNl72+4bLXN1z2+obLXt9w2esbLnt9w2Wvb7js9Q2Xvb7hstc3XPb6hste33DZ6xsue33DZa9vuOz1DZe9vuGy1zdc9vqGy17fcNnrGy57fcNlr2+47PUNl72+4bLXN1z2+obLXt9w2esbLnt9w2Wvb7js9Q2Xvb7hstc3XPb6hste33DZ6xsue33DZa9vuOz1DZe9vuGy1zdc9vqGy17fcNnrGy57fcNlr2+47PUNl72+4bLXN1z2+obLXt9w2esbLnt9w2Wvb7js9Q2Xvb7hstc3XPb6hste33DZ6xsue33DZa9vuOz1TZe9vumy1zdd9vqmy17fvMTlUarLozSXR+kujzJcHsXl7Lvs9U2Xvb7pstc3Xfb6pste33TZ65sue33TZa9vuuz1TZe9vumy1zdd9vqmy17fdNnrmy57fdNlr2+67PVNl72+6bLXN132+qbLXt902eubLnt902Wvb7rs9U2Xvb7pstc3Xfb6pste33TZ65sue33TZa9vuuz1TZe9vumy1zdd9vqmy17fdNnrmy57fdNlr2+67PVNl72+6bLXN132+qbLXt902eubLnt902Wvb7rs9U2Xvb7pstc3Xfb6pste33TZ65sue33TZa9vuuz1TZe9vumy1zdd9vqmy17fdNnrmy57fdNlr2+67PVNl72+6bLXN132+qbLXt902eubLnt902Wvb7rs9U2Xvb7pstc3Xfb6pste33TZ65sue33TZa9vuuz1TZe9vumy1zdd9vqmy17fdNnrmy57fdNlr2+67PVNj72+fnns9b0eJbk8SnZ5lOLyKOLyKNXlUZrLo3SXRxkuj+Jy9pPL2U8uZz+5nP3kcvaTy9lPLmc/uZz95HL2k8vZTy5nP7uc/exy9rPL2c8uZz+7nP3scvazy9nPLmc/u5z97HL2i8vZLy5nv7ic/eJy9ovL2S8uZ7+4nP3icvaLy9kvLmdfXM6+uJx9cTn74nL2xeXsi8vZF5ezLy5nX1zOvric/epy9qvL2a8uZ7+6nP3qcvary9mvLme/upz96nL2q8vZby5nv7mc/eZy9pvL2W8uZ7+5nP3mcvaby9lvLme/uZz97nL2u8vZ7y5nv7uc/e5y9rvL2e8uZ7+7nP3ucva7y9kfLmd/uJz94XL2h8vZHy5nf7ic/eFy9ofL2R8uZ3+4nP3pcvany9mfLmd/upz96XL2p8vZny5nf7qc/ely9l32+pLLXl9y2etLLnt9yWWvL13i8ijV5VGay6N0l0cZLo/icvZd9vqSy15fctnrSy57fcllry+57PUll72+5LLXl1z2+pLLXl9y2etLLnt9yWWvL7ns9SWXvb7ksteXXPb6ksteX3LZ60sue33JZa8vuez1JZe9vuSy15dc9vqSy15fctnrSy57fcllry+57PUll72+5LLXl1z2+pLLXl9y2etLLnt9yWWvL7ns9SWXvb7ksteXXPb6ksteX3LZ60sue33JZa8vuez1JZe9vuSy15dc9vqSy15fctnrSy57fcllry+57PUll72+5LLXl1z2+pLLXl9y2etLLnt9yWWvL7ns9SWXvb7ksteXXPb6ksteX3LZ60sue33JZa8vuez1JZe9vuSy15dc9vqSy15fctnrSy57fcllry+57PUll72+5LLXl1z2+pLLXl9y2etLLnt9yWWvL7ns9SWXvb7ksteXXPb6ksteX3bZ68sue33ZZa8vu+z15UtcHqW6PEpzeZTu8ijD5VFczr7LXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnryy57fdllry+77PVll72+7LLXl132+rLLXl922evLLnt92WWvL7vs9WWXvb7ssteXXfb6ssteX3bZ68sue33ZZa8vu+z1ZZe9vuyy15dd9vqyy15fdtnrKy57fcVlr6+47PUVl72+conLo1SXR2kuj9JdHmW4PIrL2XfZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt9xWWvr7js9RWXvb7istdXXPb6isteX3HZ6ysue33FZa+vuOz1FZe9vuKy11dc9vqKy15fcdnrKy57fcVlr6+47PUVl72+4rLXV1z2+orLXl9x2esrLnt94rLXJy57feKy1ycue31yicujVJdHaS6P0l0eZbg8isvZd9nrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT5x2esTl70+cdnrE5e9PnHZ6xOXvT6x2eu7+q9Hucb48ijV5VGay6OYnP1U6+dRcpEvjzJcHmV6PIrNXp/6KMnlUbLLoxSXRxGXR6kuj9JcHsXl7A+Xsz9czv50OfvT5exPl7M/Xc7+dDn70+XsT5ezP13O/nQ5+9Pj7NfrcnmU5PIo2eVRisujiMujVJdHaS6P0l0eZbg8isvZTy5nP7mc/eRy9pPL2U8uZz+5nP3kcvaTy9lPLmc/uZz97HL2s8vZzy5nP7uc/exy9rPL2c8uZz+7nP3scvazy9kvLme/uJz94nL2i8vZLy5nv7ic/eJy9ovL2S8uZ7+4nH1xOfvicvbF5eyLy9kXl7MvLmdfXM6+uJx9cTn74nL2q8vZry5nv7qc/epy9qvL2a8uZ7+6nP3qcvary9mvLme/uZz95nL2m8vZby5nv7mc/eZy9pvL2W8uZ7+5nP3mcva7y9nvLme/u5z97nL2u8vZ7y5nv7ucfZe9vuqy11dd9vqqy15fddnrqy57fdVlr6+67PVVl72+6rLXV132+qrLXl912eurLnt91WWvr7rs9VWXvb7qstdXXfb6qsteX3XZ66sue33VZa+vuez1NZe9vuay19dc9vraJS6PUl0epbk8Snd5lOHyKC5n32Wvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PU1l72+5rLX11z2+prLXl9z2etrLnt9zWWvr7ns9TWXvb7mstfXXPb6msteX3PZ62sue33NZa+vuez1NZe9vuay19dc9vqay15fc9nray57fc1lr6+57PV1l72+7rLX1132+rrLXl+/xOVRqsujNJdH6S6PMlwexeXsu+z1dZe9vu6y19dd9vq6y15fd9nr6y57fd1lr6+77PV1l72+7rLX1132+rrLXl932evrLnt93WWvr7vs9XWXvb7ustfXXfb6usteX3fZ6+sue33dZa+vu+z1dZe9vu6y19dd9vq6y15fd9nr6y57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VOb6kspcX1KZ60sbqaySVVYpKqtUlVWayioqZ19lri+pzPUllbm+pDLXl1Tm+pLKXF9SmetLKnN9SWWuL6nM9SWVub6kMteXVOb6kspcX1KZ60sqc31JZa4vqcz1JZW5vqQy15dU5vqSylxfUpnrSypzfUllri+pzPUllbm+pDLXl1Tm+pLKXF9SmetLKnN9SWWuL6nM9SWVub6kMteXVOb6kspcX1KZ60sqc31JZa4vqcz1JZW5vqQy15dU5vqSylxfUpnrSypzfUllri+pzPUllbm+pDLXl1Tm+pLKXF9SmetLKnN9SWWuL6nM9SWVub6kMteXVOb6kspcX1KZ60sqc31JZa4vqcz1JZW5vqQy15dU5vqSylxfUpnrSypzfUllri+pzPUllbm+pDLXl1Tm+pLKXF9SmetLKnN9SWWuL6nM9SWVub6kMteXVOb6kspcX1KZ60sqc31JZa4vqcz1kcpcH6nM9ZHKXB+pzPXRRiqrZJVVisoqVWWVprKKytlXmesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVuT5Smesjlbk+UpnrI5W5PlKZ6yOVub6sMteXVeb6sspcX1aZ68sbqaySVVYpKqtUlVWayioqZ19lri+rzPVllbm+rDLXl1Xm+rLKXF9WmevLKnN9WWWuL6vM9WWVub6sMteXVeb6sspcX1aZ68sqc31ZZa4vq8z1ZZW5vqwy15dV5vqyylxfVpnryypzfVllri+rzPVllbm+rDLXl1Xm+rLKXF9WmevLKnN9WWWuL6vM9WWVub6sMteXVeb6sspcX1aZ68sqc31ZZa4vq8z1ZZW5vqwy15dV5vqyylxfVpnryypzfVllri+rzPVllbm+rDLXl1Xm+rLKXF9WmevLKnN9WWWuL6vM9WWVub6sMteXVeb6sspcX1aZ68sqc31ZZa4vq8z1ZZW5vqwy15dV5vqyylxfVpnryypzfVllri+rzPVllbm+rDLXl1Xm+rLKXF9WmevLKnN9WWWuL6vM9WWVub6sMteXVeb6sspcX1aZ68sqc31ZZa4vq8z1FZW5vqIy11dU5vqKylxf2UhllayySlFZpaqs0lRWUTn7KnN9RWWur6jM9RWVub6iMtdXVOb6ispcX1GZ6ysqc31FZa6vqMz1FZW5vqIy11dU5vqKylxfUZnrKypzfUVlrq+ozPUVlbm+ojLXV1Tm+orKXF9RmesrKnN9RWWur6jM9RWVub6iMtdXVOb6ispcX1GZ6ysqc31FZa6vqMz1FZW5vqIy11dU5vqKylxfUZnrKypzfUVlrq+ozPUVlbm+ojLXV1Tm+orKXF9RmesrKnN9RWWur6jM9RWVub6iMtdXVOb6ispcX1GZ6ysqc31FZa6vqMz1FZW5vqIy11dU5vqKylxfUZnrKypzfUVlrq+ozPUVlbm+ojLXV1Tm+orKXF9RmesrKnN9RWWur6jM9RWVub6iMtdXVOb6ispcX1GZ6ysqc31FZa6vqMz1FZW5vqIy11dU5vqKylxfUZnrKypzfUVlrq+qzPVVlbm+qjLXV1Xm+upGKqtklVWKyipVZZWmsorK2VeZ66sqc31VZa6vqsz1VZW5vqoy11dV5vqqylxfVZnrqypzfVVlrq+qzPVVlbm+qjLXV1Xm+qrKXF9VmeurKnN9VWWur6rM9VWVub6qMtdXVeb6qspcX1WZ66sqc31VZa6vqsz1VZW5vqoy11dV5vqqylxfVZnrqypzfVVlrq+qzPVVlbm+qjLXV1Xm+qrKXF9VmeurKnN9VWWur6rM9VWVub6qMtdXVeb6qspcX1WZ66sqc31VZa6vqsz1VZW5vqoy11dV5vqqylxfVZnrqypzfVVlrq+qzPVVlbm+qjLXV1Xm+qrKXF9VmeurKnN9VWWur6rM9VWVub6qMtdXVeb6qspcX1WZ66sqc31VZa6vqsz1VZW5vqoy11dV5vqqylxfVZnrqypzfVVlrq+qzPVVlbm+qjLXV1Xm+qrKXF9VmeurKnN9TWWur6nM9TWVub6mMtfXNlJZJausUlRWqSqrNJVVVM6+ylxfU5nraypzfU1lrq+pzPU1lbm+pjLX11Tm+prKXF9TmetrKnN9TWWur6nM9TWVub6mMtfXVOb6mspcX1OZ62sqc31NZa6vqcz1NZW5vqYy19dU5vqaylxfU5nraypzfU1lrq+pzPU1lbm+pjLX11Tm+prKXF9TmetrKnN9TWWur6nM9TWVub6mMtfXVOb6mspcX1OZ62sqc31NZa6vqcz1NZW5vqYy19dU5vqaylxfU5nraypzfU1lrq+pzPU1lbm+pjLX11Tm+prKXF9TmetrKnN9TWWur6nM9TWVub6mMtfXVOb6mspcX1OZ62sqc31NZa6vqcz1NZW5vqYy19dU5vqaylxfU5nraypzfU1lrq+pzPU1lbm+pjLX11Tm+prKXF9TmetrKnN9TWWur6nM9TWVub6mMtfXVOb6mspcX1OZ6+sqc31dZa6vq8z1dZW5vr6RyipZZZWiskpVWaWprKJy9lXm+rrKXF9XmevrKnN9XWWur6vM9XWVub6uMtfXVeb6uspcX1eZ6+sqc31dZa6vq8z1dZW5vq4y19dV5vq6ylxfV5nr6ypzfV1lrq+rzPV1lbm+rjLX11Xm+rrKXF9XmevrKnN9XWWur6vM9XWVub6uMtfXVeb6uspcX1eZ6+sqc31dZa6vq8z1dZW5vq4y19dV5vq6ylxfV5nr6ypzfV1lrq+rzPV1lbm+rjLX11Xm+rrKXF9XmevrKnN9XWWur6vM9XWVub6uMtfXVeb6uspcX1eZ6+sqc31dZa6vq8z1dZW5vq4y19dV5vq6ylxfV5nr6ypzfV1lrq+rzPV1lbm+rjLX11Xm+rrKXF9XmevrKnN9XWWur6vM9XWVub6uMtfXVeb6uspcX1eZ6+sqc31dZa6vq8z1dZW5vq4y19dV5vq6xlxf2TTm+m6rBJVVosoqSWUVUlklq6xSVFapKqs0lVVUzn5QOftB5ewHlbMfVM5+UDn7QeXsB5WzH1TOflA5+0Hl7EeVsx9Vzn5UOftR5exHlbMfVc5+VDn7UeXsR5WzH1XOflI5+0nl7CeVs59Uzn5SOftJ5ewnlbOfVM5+Ujn7SeXsk8rZJ5WzTypnn1TOPqmcfVI5+6Ry9knl7JPK2SeVs59Vzn5WOftZ5exnlbOfVc5+Vjn7WeXsZ5Wzn1XOflY5+0Xl7BeVs19Uzn5ROftF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","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use dep::std;\nuse std::hash::poseidon2::Poseidon2;\n\n// Use specific imports from mpclib\nuse mpclib::selective_disclosure::selective_disclosure::{\n    consume_round_commitments, create_round_commitments, RoundState, UserOutputState,\n};\n\n// Declare core modules for Among Us game\nmod player_state;\nmod validate_move;\nmod update_vision;\n// mod api; // Comment out if moving logic directly here\n\n// Re-export necessary items for use within the crate (e.g., in api.nr) or potentially externally\n// Ensure items being re-exported are marked `pub` in their respective modules\npub use player_state::{ PlayerPublicInfo, PlayerPrivateInfo };\npub use player_state::{ MAP_SIZE, NUM_PLAYERS, MAX_VISIBLE_SECTIONS }; \npub use player_state::{ ROLE_CREW, ROLE_IMPOSTER, STATUS_ALIVE, STATUS_DEAD }; // Re-export constants\npub use validate_move::validate_adjacent_move;\npub use update_vision::calculate_visible_sections;\n\n// Keep API re-export separate if preferred\n// pub use api::{*}; // Removed wildcard export - access via api::function_name\n\n// Placeholder example function (remove or move later)\n// fn example_move_proof(...) -> UserState { ... }\n\n// NOTE: Old chess-specific code, structs (GameState, MoveHashes, etc.) \n// and functions (move, consume_opponent_move_and_update_game_state, commit_to_user_secrets)\n// defined directly in the old lib.nr have been removed.\n// Their equivalents should be defined within the `api` module, \n// using the new structs and functions from player_state, validate_move, update_vision.\n\n// --- Core Types (Mirrors fog_of_war_chess structure) ---\n\ntype RoundMpcState = RoundState<64, NUM_PLAYERS>;\npub struct GameState {\n    pub game_ended: bool, // Or maybe an enum: Ongoing, CrewWin, ImposterWin\n    pub turn_count: u32, \n    // Store the public state of all players\n    pub all_players_public: [PlayerPublicInfo; NUM_PLAYERS],\n    // Add other global state: e.g., emergency meeting status, task progress?\n    pub mpc_state: RoundMpcState, // Re-add MPC state\n}\n\nimpl std::default::Default for GameState {\n    fn default() -> Self {\n        let mut players = [PlayerPublicInfo::default(); NUM_PLAYERS];\n        for i in 0..NUM_PLAYERS {\n            players[i].game_player_index = i;\n            // Role assignment removed - Roles are private now\n            // Actual roles will be determined during initialization (e.g., via shuffle or predetermined secret)\n            players[i].section_id = 36; // Example start section\n            players[i].status = STATUS_ALIVE; \n            players[i].player_id = i as Field; \n        }\n        GameState { \n            game_ended: false, \n            turn_count: 0, \n            all_players_public: players,\n            mpc_state: RoundMpcState::default() \n        }\n    }\n}\n\n// Add commit_to_user_secrets based on user example\nimpl GameState {\n    // Use mpc_state.hash() as confirmed from mpclib source\n    pub fn hash(self) -> Field {\n        self.mpc_state.hash() \n    }\n\n    // #[export] // Cannot export from impl block\n    // Internal logic for committing secrets\n    fn commit_secrets_logic(\n        mut self, \n        encrypt_secret: Field,\n        mask_secret: Field,\n        player_index: u32,\n    ) -> GameState {\n        let encrypt_buffer = [encrypt_secret];\n        let encrypt_hash = Poseidon2::hash(encrypt_buffer, 1);\n        let mask_buffer = [mask_secret];\n        let mask_hash = Poseidon2::hash(mask_buffer, 1);\n        self.mpc_state.user_encrypt_secret_hashes[player_index] = encrypt_hash;\n        self.mpc_state.user_mask_secret_hashes[player_index] = mask_hash;\n        self \n    }\n}\n\n// Standalone exported function to commit secrets (mirrors internal logic)\n#[export]\npub fn commit_to_user_secrets(\n    game_state: GameState, \n    encrypt_secret: Field,\n    mask_secret: Field,\n    player_index: u32,\n) -> GameState {\n    // Call the internal logic\n    game_state.commit_secrets_logic(encrypt_secret, mask_secret, player_index)\n}\n\n// Adapted MoveData for Among Us\npub struct MoveData {\n    pub target_section: u32,\n}\n\n// Adapted UserState for Among Us (uses internal modules)\npub struct UserState {\n     pub my_player_index: u32, \n     pub private_info: PlayerPrivateInfo, // Now includes role\n     pub encrypt_secret: Field, // Add secret for MPC\n     pub mask_secret: Field,    // Add secret for MPC\n     // Player's view of the public state (might differ from global GameState due to visibility)\n     pub all_players_public_view: [PlayerPublicInfo; NUM_PLAYERS], \n     pub visible_sections: [u32; MAX_VISIBLE_SECTIONS], \n     // Maybe add: pub task_list: ..., pub kill_cooldown: ...\n}\n\n// Default UserState needs careful initialization based on player index\nimpl std::default::Default for UserState {\n     fn default() -> Self {\n         // Default state is somewhat meaningless without a player index context\n         // initialize_user_state function is better.\n         let invalid_section_sentinel: u32 = MAP_SIZE * MAP_SIZE; \n         let default_visible = [invalid_section_sentinel; MAX_VISIBLE_SECTIONS]; \n         UserState {\n             my_player_index: NUM_PLAYERS, // Sentinel for invalid/default\n             private_info: PlayerPrivateInfo::default(),\n             encrypt_secret: 0, // Default secret (should be replaced)\n             mask_secret: 0,    // Default secret (should be replaced)\n             all_players_public_view: [PlayerPublicInfo::default(); NUM_PLAYERS],\n             visible_sections: default_visible,\n         }\n     }\n}\n\n// Add an encode method to UserState\nimpl UserState {\n    // Encodes the player's view of everyone's public state (section and status)\n    // into a [Field; 64] buffer for commitment.\n    // Player i's section_id maps to index 2*i\n    // Player i's status maps to index 2*i + 1\n    // Pass self by value as workaround for ownership flag issue\n    pub fn encode_state_for_commitment(self) -> [Field; 64] {\n        let mut encoded = [0; 64];\n        // Ensure we don't write past the buffer if NUM_PLAYERS > 32\n        let max_players_to_encode = if NUM_PLAYERS * 2 > 64 { 32 } else { NUM_PLAYERS };\n\n        for i in 0..max_players_to_encode {\n            // Encode section_id for player i at index 2*i\n            encoded[2 * i] = self.all_players_public_view[i].section_id as Field;\n            // Encode status for player i at index 2*i + 1\n            encoded[2 * i + 1] = self.all_players_public_view[i].status as Field;\n            // Role is private and not encoded here.\n            // Player ID is implicitly known by index.\n        }\n        // Indices from max_players_to_encode*2 up to 63 remain 0.\n        encoded\n    }\n}\n\n// Adapted MoveHashes\npub struct MoveHashes {\n    pub input_game_state_hash: Field, // Hash of GameState before move\n    pub input_user_state_hash: Field, // Hash of UserState before move\n    pub output_game_state_hash: Field, // Hash of GameState after move\n    pub output_user_state_hash: Field, // Hash of UserState after move\n}\n\nimpl std::default::Default for MoveHashes {\n    fn default() -> Self {\n        MoveHashes {\n            input_game_state_hash: 0,\n            input_user_state_hash: 0,\n            output_game_state_hash: 0,\n            output_user_state_hash: 0,\n        }\n    }\n}\n\n// --- Core Functions (Mirrors fog_of_war_chess structure) ---\n\n// Public move function: takes current state, user state, move data, and player index\n// Returns the new global state and relevant hashes\n#[export]\npub fn move(\n    input_state: GameState,    // Changed: Removed 'mut', renamed to input_state\n    user_state: UserState,\n    move_data: MoveData\n) -> (GameState, MoveHashes) { // Return type remains the same\n\n    let player_index = user_state.my_player_index;\n    // Calculate input hashes\n    let input_game_state_hash = input_state.hash();\n    // Placeholder for user state hash calculation\n    let input_user_state_buffer = [user_state.private_info.encrypt_secret, user_state.private_info.mask_secret];\n    let input_user_state_hash = Poseidon2::hash(input_user_state_buffer, 2);\n\n    // 1. Assertions and Pre-conditions\n    assert_eq(input_state.game_ended, false, \"Game already ended\");\n    //assert_eq(user_state.my_player_index, player_index, \"UserState does not match player_index\");\n    // Ensure the player making the move is alive in their own view\n    let my_public_info_view = user_state.all_players_public_view[player_index];\n    assert(my_public_info_view.status == STATUS_ALIVE, \"Cannot move when dead\"); // Check against constant\n\n    // 2. Validate Move Legality (using internal module)\n    let current_section = my_public_info_view.section_id;\n    let target_section = move_data.target_section;\n    let is_valid = validate_adjacent_move(current_section, target_section, MAP_SIZE); // Re-use validation\n    assert(is_valid, \"Invalid move: Target section not adjacent\"); // Assert the result\n\n    // 3. Calculate *Intended* Next Player State (for commitment)\n    // This calculates what the user_state *would* look like after the move,\n    // primarily for determining visibility for the commitment mask.\n    // It does NOT modify the input user_state.\n    let mut intended_next_user_state = user_state; // Start with current state\n    intended_next_user_state.all_players_public_view[player_index].section_id = target_section; // Update position\n    intended_next_user_state.visible_sections = calculate_visible_sections(target_section, MAP_SIZE); // Update vision\n\n    // 4. Prepare MPC Commitment Data\n    // Encode the player's *intended* view of the public state after the move\n    let encoded_state_to_commit: [Field; 64] = intended_next_user_state.encode_state_for_commitment();\n\n    // Create visibility mask based on the *intended* post-move state\n    let mut visibility_fields: [Field; 64] = [0; 64]; // 0 = hide, 1 = reveal\n    for i in 0..NUM_PLAYERS { // Iterate through all players (global indices)\n        let opponent_global_index = i;\n        let opponent_section = intended_next_user_state.all_players_public_view[opponent_global_index].section_id;\n        let mut opponent_is_visible = false;\n        for j in 0..MAX_VISIBLE_SECTIONS {\n            if intended_next_user_state.visible_sections[j] == opponent_section {\n                opponent_is_visible = true;\n            }\n        }\n\n        // If the opponent is visible *or* if it's the player themselves, mark their fields revealable\n        if opponent_is_visible | (opponent_global_index == player_index) {\n             // Mark section_id (index 2*i) and status (index 2*i + 1) as revealable\n            visibility_fields[2 * opponent_global_index] = 1;\n            visibility_fields[2 * opponent_global_index + 1] = 1;\n        }\n    }\n    // Ensure player always reveals their own info\n    if player_index < NUM_PLAYERS { // Basic bounds check\n        visibility_fields[2 * player_index] = 1;     // Reveal own section\n        visibility_fields[2 * player_index + 1] = 1; // Reveal own status\n    }\n\n    // 5. Create MPC Commitments\n    let mut output_commitments: UserOutputState<64, NUM_PLAYERS> = create_round_commitments(\n        encoded_state_to_commit,\n        visibility_fields,\n        user_state.private_info.encrypt_secret, // Use secrets from the *input* user_state\n        user_state.private_info.mask_secret,\n        input_state.mpc_state, // Pass the *immutable* input mpc_state\n        player_index\n    );\n\n    // 6. Calculate the next MPC state using the input state's mpc_state\n    let mut output_mpc_state = input_state.mpc_state;\n    //.update2(output_commitments, player_index);\n\n    output_mpc_state.round_number += 1;\n    output_mpc_state.previous_output_states[player_index] = output_commitments;\n\n    // 7. Create the output GameState\n    // Create a mutable copy of the public player info to update it\n    let mut updated_all_players_public = input_state.all_players_public;\n    updated_all_players_public[player_index].section_id = target_section;\n\n    let output_game_state = GameState {\n        all_players_public: updated_all_players_public, // Use the updated copy\n        game_ended: input_state.game_ended, // For now, assume move doesn't end game\n        mpc_state: output_mpc_state,        // Use the newly calculated MPC state\n        turn_count: input_state.turn_count + 1, // Increment turn count\n    };\n\n    // 8. Calculate Output Hashes\n    let output_game_state_hash = output_game_state.hash();\n    // User state hash should reflect the state *before* consumption,\n    // which is encoded in `encoded_state_to_commit`.\n    let output_user_state_hash = Poseidon2::hash(encoded_state_to_commit, encoded_state_to_commit.len());\n\n    // 9. Return updated global state and hashes\n    let move_hashes = MoveHashes {\n        input_game_state_hash: input_game_state_hash,\n        input_user_state_hash: input_user_state_hash, // Hash of input user state secrets\n        output_game_state_hash: output_game_state_hash, // Hash of the new game state\n        output_user_state_hash: output_user_state_hash, // Hash of the committed user view\n    };\n\n    (output_game_state, move_hashes)\n}\n\n// Initializer for GameState\n#[export]\npub fn empty_game_state() -> GameState {\n     GameState::default() // IMPLICIT return\n}\n\n// Initializer for UserState\n#[export]\npub fn initialize_user_state(player_index: u32, encrypt_secret: Field, mask_secret: Field) -> UserState {\n    let my_role = if player_index < 2 { ROLE_IMPOSTER } else { ROLE_CREW };\n    let initial_global_state = GameState::default();\n    let my_start_section = initial_global_state.all_players_public[player_index].section_id;\n    let initial_visible_sections = calculate_visible_sections(my_start_section, MAP_SIZE);\n    let mut initial_view = [PlayerPublicInfo::default(); NUM_PLAYERS];\n    \n    for i in 0..NUM_PLAYERS {\n        let other_player_global_info = initial_global_state.all_players_public[i];\n        let other_player_section = other_player_global_info.section_id;\n        let mut player_can_be_seen = false; \n        for j in 0..MAX_VISIBLE_SECTIONS {\n             if initial_visible_sections[j] == other_player_section {\n                 player_can_be_seen = true;\n             }\n        }\n\n        if i == player_index {\n            initial_view[i] = other_player_global_info;\n        } else { \n            if player_can_be_seen {\n                 initial_view[i] = other_player_global_info;\n            } else {\n                let mut masked_info = PlayerPublicInfo::default();\n                masked_info.game_player_index = i; \n                masked_info.section_id = MAP_SIZE * MAP_SIZE; \n                masked_info.status = other_player_global_info.status; \n                initial_view[i] = masked_info; \n            }\n        }\n    }\n\n    let user_state = UserState {\n        my_player_index: player_index,\n        private_info: PlayerPrivateInfo { \n            role: my_role, \n            encrypt_secret: encrypt_secret, \n            mask_secret: mask_secret, \n            voted_for_index: NUM_PLAYERS \n        },\n        encrypt_secret: encrypt_secret, \n        mask_secret: mask_secret,\n        all_players_public_view: initial_view, \n        visible_sections: initial_visible_sections,\n    };\n    \n     user_state \n}\n\n// Function to update a player's local UserState based on the global GameState's MPC commitments\n#[export]\npub fn consume_global_state_and_update_local_view(\n    current_local_user_state: UserState, \n    global_game_state: GameState,      \n) -> UserState {                        \n\n    let my_player_index = current_local_user_state.my_player_index;\n\n    // --- Consume Commitments --- \n    let revealed_state_data_nested: [[Option<Field>; 64]; NUM_PLAYERS - 1] = consume_round_commitments(\n        current_local_user_state.mask_secret, \n        global_game_state.mpc_state,             \n        my_player_index \n    );\n\n    // --- Update View --- \n    let mut updated_user_state = current_local_user_state;\n    \n    // Keep track of which opponent index maps to which nested array index\n    let mut opponent_array_index = 0; \n\n    for opponent_global_index in 0..NUM_PLAYERS {\n        if opponent_global_index != my_player_index {\n            // Get the revealed Option<Field> array for this specific opponent\n            let revealed_opponent_options: [Option<Field>; 64] = revealed_state_data_nested[opponent_array_index];\n            \n            // Get a mutable reference to our current view of this opponent\n            let mut current_opponent_view = updated_user_state.all_players_public_view[opponent_global_index];\n\n            // Decode revealed section_id (encoded at index 2 * opponent_global_index)\n            let section_index = 2 * opponent_global_index;\n            if section_index < 64 { // Bounds check\n                if revealed_opponent_options[section_index].is_some() {\n                    // Revealed: Update section_id in our view\n                    current_opponent_view.section_id = revealed_opponent_options[section_index].unwrap_unchecked() as u32;\n                } // else: Not revealed, keep existing section_id view (potentially masked/stale)\n            }\n\n            // Decode status (encoded at index 2 * opponent_global_index + 1)\n            let status_index = section_index + 1;\n            if status_index < 64 { // Bounds check\n                if revealed_opponent_options[status_index].is_some() {\n                    // Revealed: Update status in our view\n                    current_opponent_view.status = revealed_opponent_options[status_index].unwrap_unchecked() as u32;\n                } // else: Not revealed, keep existing status view (potentially masked/stale)\n            }\n\n            // NOTE: Other fields (indices not 2*i or 2*i+1) were not encoded in the first place,\n            // so we don't need to decode them.\n\n            // --- Update the main view array with the potentially updated opponent view ---\n            updated_user_state.all_players_public_view[opponent_global_index] = current_opponent_view;\n            \n            // Increment index for the revealed_state_data_nested array\n            opponent_array_index += 1;\n        }\n    }\n\n    // --- Update Our Own Public View Info ---\n    // Ensure our own view reflects the latest public global state for ourselves,\n    // as our state isn't revealed via consume_round_commitments.\n    updated_user_state.all_players_public_view[my_player_index] = global_game_state.all_players_public[my_player_index];\n\n    // --- Recalculate Visibility --- \n    let my_updated_section = updated_user_state.all_players_public_view[my_player_index].section_id;\n    updated_user_state.visible_sections = calculate_visible_sections(my_updated_section, MAP_SIZE);\n\n    // --- Optional: Re-masking based on new visibility (can be complex) ---\n    // This logic might be needed if players can move *out* of view and their info should be hidden again.\n    // For now, we rely on the initial decoding providing the correct visible state.\n\n    // --- Return Updated State --- \n    updated_user_state \n}\n","path":"/Users/lago/Desktop/joaolago1113/fogofwarr/zk_amongus/src/lib.nr"},"63":{"source":"use crate::player_state::{MAP_SIZE, MAX_VISIBLE_SECTIONS, NUM_PLAYERS};\nuse dep::std;\n\n// Calculates the set of visible sections for a player based on simple adjacency.\n// Includes the player's own section.\n// Returns an array of size MAX_VISIBLE_SECTIONS, padded with invalid_section_sentinel for invalid/out-of-bounds sections.\npub fn calculate_visible_sections(\n    player_section: u32, \n    map_size: u32\n) -> [u32; MAX_VISIBLE_SECTIONS] {\n    \n    let invalid_section_sentinel: u32 = map_size * map_size; // Use same sentinel as default\n    let mut visible_sections = [invalid_section_sentinel; MAX_VISIBLE_SECTIONS];\n    let mut visible_count: u32 = 0; \n\n    let player_x: u32 = player_section % map_size;\n    let player_y: u32 = player_section / map_size;\n\n    // Iterate through the 3x3 grid centered on the player\n    for y_offset_idx in 0..3 { // y_offset = -1, 0, 1 maps to index 0, 1, 2\n        for x_offset_idx in 0..3 { // x_offset = -1, 0, 1 maps to index 0, 1, 2\n            let y_offset: i64 = (y_offset_idx as i64) - 1;\n            let x_offset: i64 = (x_offset_idx as i64) - 1;\n\n            let current_x_signed: i64 = (player_x as i64) + x_offset;\n            let current_y_signed: i64 = (player_y as i64) + y_offset;\n\n            // Boundary checks\n            if current_x_signed >= 0 & current_x_signed < (map_size as i64) & \n               current_y_signed >= 0 & current_y_signed < (map_size as i64) \n            {\n                // Convert back to u32 if within bounds\n                let current_x = current_x_signed as u32;\n                let current_y = current_y_signed as u32;\n                let section_id = current_y * map_size + current_x;\n                \n                // Add to visible sections if there's space\n                if visible_count < MAX_VISIBLE_SECTIONS {\n                    visible_sections[visible_count] = section_id;\n                    visible_count = visible_count + 1;\n                }\n            }\n        }\n    }\n\n    visible_sections\n}\n\n// Test case (replace old ones)\n#[test]\nfn test_visibility_center() {\n    let map_s: u32 = 8;\n    let invalid_sentinel: u32 = map_s * map_s;\n    // Center section for 8x8 is 27 (3,3) or 36 (4,4). Let's use 36.\n    let center_section: u32 = (map_s / 2) * map_s + (map_s / 2);\n    let visible = calculate_visible_sections(center_section, map_s);\n    \n    // Expected sections for center (4,4) are: 27, 28, 29, 35, 36, 37, 43, 44, 45\n    let expected = [27, 28, 29, 35, 36, 37, 43, 44, 45];\n    let mut count = 0;\n    for i in 0..MAX_VISIBLE_SECTIONS {\n        if visible[i] != invalid_sentinel { // Use sentinel for check\n            let mut found = false;\n            for j in 0..expected.len() {\n                if visible[i] == expected[j] {\n                    found = true;\n                }\n            }\n            // Check after inner loop completes\n            assert(found, \"Visible section not in expected list\");\n            count += 1;\n        }\n    }\n    assert(count == expected.len(), \"Incorrect number of visible sections\");\n}\n\n#[test]\nfn test_visibility_corner() {\n    let map_s: u32 = 8;\n    let invalid_sentinel: u32 = map_s * map_s;\n    let corner_section: u32 = 0; // Top-left corner (0,0)\n    let visible = calculate_visible_sections(corner_section, map_s);\n    \n    // Expected sections for corner (0,0) are: 0, 1, 8, 9\n    let expected = [0, 1, 8, 9];\n    let mut count = 0;\n    let mut sorted_visible = [invalid_sentinel; MAX_VISIBLE_SECTIONS]; // Use sentinel\n    let mut k: u32 = 0; // Ensure k is u32\n\n    // Collect valid visible sections\n    for i in 0..MAX_VISIBLE_SECTIONS {\n         if visible[i] != invalid_sentinel { // Use sentinel\n             assert(k < MAX_VISIBLE_SECTIONS, \"Exceeded visible section buffer\"); // Safety check\n             sorted_visible[k] = visible[i];\n             k += 1;\n         }\n    }\n     // Basic check for count and presence\n     assert(k == (expected.len() as u32), \"Incorrect number of visible sections for corner\");\n     for i in 0..expected.len() {\n         let mut found = false;\n         for j in 0..k {\n             if sorted_visible[j] == expected[i] {\n                 found = true;\n             }\n         }\n         // Check after inner loop completes\n         assert(found, \"Expected corner section not found\");\n     }\n}\n\n// Remove old chess vision functions and tests\n// pub(crate) fn update_vision(...) { ... }\n// fn update_vision_for_pawn(...) { ... }\n// #[test] fn test_piece_data() { ... }\n","path":"/Users/lago/Desktop/joaolago1113/fogofwarr/zk_amongus/src/update_vision.nr"},"67":{"source":"/// Given an initial secret Field element, expand it into `N` uniformly randomly distributed field elements\npub(crate) fn expand_secret<let N: u32>(secret: Field) -> [Field; N] {\n    let mut rolling_secret: [Field; 2] = [0, secret];\n    let mut r: [Field; N] = [0; N];\n    for i in 0..N {\n        r[i] = std::hash::poseidon2::Poseidon2::hash(rolling_secret, 2);\n        rolling_secret[1] += 1;\n    }\n    r\n}\n\npub(crate) fn symmetric_encrypt<let N: u32>(plaintext: [Field; N], secret: Field) -> [Field; N] {\n    let mut ciphertext: [Field; N] = [0; N];\n\n    let secrets: [Field; N] = expand_secret(secret);\n    for i in 0..N {\n        ciphertext[i] = secrets[i] + plaintext[i];\n    }\n    ciphertext\n}\n\npub(crate) fn symmetric_decrypt(\n    ciphertext: [Field; 2],\n    secret: Field,\n) -> std::option::Option<Field> {\n    let mut r: std::option::Option<Field> = std::option::Option::default();\n    let mut decrypted_text: [Field; 2] = [0; 2];\n\n    let secrets: [Field; 2] = expand_secret(secret);\n    for i in 0..2 {\n        decrypted_text[i] = ciphertext[i] - secrets[i];\n    }\n\n    let is_real = decrypted_text[0] == 0;\n\n    if is_real {\n        r = std::option::Option::some(decrypted_text[1]);\n    } else {\n        r = std::option::Option::none();\n    }\n    r\n}\n\nuse std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\npub struct Ciphertext<let N: u32> {\n    data: [Field; N * 2],\n}\n\nimpl<let N: u32> std::default::Default for Ciphertext<N> {\n    fn default() -> Self {\n        Ciphertext { data: [0; 2 * N] }\n    }\n}\n\npub(crate) fn trial_decrypt<let N: u32>(\n    possible_encryption_keys: [Point; N],\n    ciphertext: Ciphertext<N>,\n) -> [Option<Field>; N] {\n    let mut possible_plaintext: [Option<Field>; N] = [Option::default(); N];\n    for i in 0..N {\n        possible_plaintext[i] = symmetric_decrypt(\n            [ciphertext.data[2 * i], ciphertext.data[2 * i + 1]],\n            possible_encryption_keys[i].x,\n        );\n    }\n    possible_plaintext\n}\n","path":"/Users/lago/nargo/github.com/zac-williamson/mpclib/main/src/common/crypto.nr"},"72":{"source":"use std::embedded_curve_ops::{\n    embedded_curve_add_unsafe, EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul,\n};\nuse std::hash::poseidon2::Poseidon2::hash as poseidon2;\n\nuse crate::common::crypto::{Ciphertext, expand_secret, symmetric_encrypt, trial_decrypt};\n\nuse bignum::{BigNumTrait, BN254_Fq};\n\ntype Point = EmbeddedCurvePoint;\n\npub global G: Point = Point {\n    x: 0x083e7911d835097629f0067531fc15cafd79a89beecb39903f69572c636f4a5a,\n    y: 0x1a7f5efaad7f315c25a918f30cc8d7333fccab7ad7c90f14de81bcc528f9935d,\n    is_infinite: false,\n};\n\nglobal H: Point = Point {\n    x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n    y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n    is_infinite: false,\n};\n\npub struct RoundState<let NumEntries: u32, let NumParticipants: u32> {\n    pub round_number: u32,\n    pub user_encrypt_secret_hashes: [Field; NumParticipants],\n    pub user_mask_secret_hashes: [Field; NumParticipants],\n    pub previous_output_states: [UserOutputState<NumEntries, NumParticipants>; NumParticipants],\n}\n\npub struct UserOutputState<let NumEntries: u32, let NumParticipants: u32> {\n    ciphertext: Ciphertext<NumEntries>,\n    mask_commitments: [Point; NumEntries],\n    user_updated_mask_commitments: [[Point; NumEntries]; NumParticipants],\n}\n\nimpl<let NumEntries: u32, let NumParticipants: u32> std::default::Default for UserOutputState<NumEntries, NumParticipants> {\n    fn default() -> Self {\n        UserOutputState {\n            ciphertext: Ciphertext::default(),\n            mask_commitments: [Point::point_at_infinity(); NumEntries],\n            user_updated_mask_commitments: [\n                [Point::point_at_infinity(); NumEntries]; NumParticipants\n            ],\n        }\n    }\n}\n\nimpl<let NumEntries: u32, let NumParticipants: u32> UserOutputState<NumEntries, NumParticipants> {\n\n    pub fn flatten(self: Self) -> [Field; NumEntries * (NumParticipants + 2) * 2] {\n        let mut flattened_data: [Field; NumEntries * (NumParticipants + 2) * 2] =\n            [0; NumEntries * (NumParticipants + 2) * 2];\n\n        for i in 0..NumEntries {\n            flattened_data[i * 2] = self.ciphertext.data[2 * i];\n            flattened_data[i * 2 + 1] = self.ciphertext.data[2 * i + 1];\n\n            flattened_data[NumEntries * 2 + i * 2] = self.mask_commitments[i].x;\n            flattened_data[NumEntries * 2 + i * 2 + 1] = self.mask_commitments[i].y;\n        }\n\n        let offset: u32 = NumEntries * 4;\n        for i in 0..NumParticipants {\n            for j in 0..NumEntries {\n                flattened_data[offset + (i * NumEntries * 2) + j * 2] =\n                    self.user_updated_mask_commitments[i][j].x;\n                flattened_data[offset + (i * NumEntries * 2) + j * 2 + 1] =\n                    self.user_updated_mask_commitments[i][j].y;\n                // TODO I think its ok to not include point at infinity here in the hash?\n            }\n        }\n        flattened_data\n    }\n    pub fn hash(self: Self) -> Field {\n        std::hash::poseidon2::Poseidon2::hash(\n            self.flatten(),\n            NumEntries * (NumParticipants + 2) * 2,\n        )\n    }\n}\n\npub fn commit<let N: u32>(plaintext: [Field; N], secret: Field) -> Ciphertext<N> {\n    let secrets: [Field; N] = expand_secret(secret);\n\n    let mut encryption_keys: [Point; N] = [Point::point_at_infinity(); N];\n    let mut ciphertext: Ciphertext<N> = Ciphertext::default();\n    for i in 0..N {\n        encryption_keys[i] = multi_scalar_mul([G], [EmbeddedCurveScalar::from_field(secrets[i])]);\n        let encrypted = symmetric_encrypt([0, plaintext[i]], encryption_keys[i].x);\n        ciphertext.data[2 * i] = encrypted[0];\n        ciphertext.data[2 * i + 1] = encrypted[1];\n    }\n    ciphertext\n}\n\npub fn commit_mask<let N: u32>(reveal_vector: [Field; N], masking_secret: Field) -> [Point; N] {\n    // if reveal_vector[i] = true, use G1, else use G2\n    let secrets: [Field; N] = expand_secret(masking_secret);\n    // let mut base_points: [Point; N] = [Point::point_at_infinity(); N];\n    // for i in 0..N {\n    //     base_points[i] = G.conditional_assign(H, reveal_vector[i]);\n    // }\n    let mut masking_keys: [Point; N] = [Point::point_at_infinity(); N];\n\n    // embedded_curve_add_unsafe\n    for i in 0..N {\n        masking_keys[i] = multi_scalar_mul([G], [EmbeddedCurveScalar::from_field(secrets[i])]);\n\n        // we can use an unsafe add op here because masking_keys[i] is a function of [G], and colliding with [H] would require solving the dlog problem\n        let alternative_masking_key = embedded_curve_add_unsafe(masking_keys[i], H);\n\n        masking_keys[i].x = (masking_keys[i].x - alternative_masking_key.x) * reveal_vector[i]\n            + alternative_masking_key.x;\n        masking_keys[i].y = (masking_keys[i].y - alternative_masking_key.y) * reveal_vector[i]\n            + alternative_masking_key.y;\n    }\n\n    masking_keys\n}\n\npub fn update_mask<let N: u32>(masking_keys: [Point; N], encrypt_secret: Field) -> [Point; N] {\n    let secrets: [Field; N] = expand_secret(encrypt_secret);\n    let mut updated_masking_keys: [Point; N] = [Point::point_at_infinity(); N];\n    for i in 0..N {\n        updated_masking_keys[i] = multi_scalar_mul(\n            [masking_keys[i]],\n            [EmbeddedCurveScalar::from_field(secrets[i])],\n        );\n    }\n    updated_masking_keys\n}\n\npub fn reveal_mask<let N: u32>(\n    updated_masking_keys: [Point; N],\n    masking_secret: Field,\n) -> [Point; N] {\n    let mut masking_secrets: [Field; N] = expand_secret(masking_secret);\n    //   println(f\"final masking secrets {inverse_masking_secrets}\");\n    let mut inverse_masking_secrets: [BN254_Fq; N] = [BN254_Fq::new(); N];\n\n    // oh arse we need to invert in the bn254 field\n    for i in 0..N {\n        let secret_bn = BN254_Fq::from(masking_secrets[i]);\n        let inverse = BN254_Fq::one() / secret_bn;\n        inverse_masking_secrets[i] = inverse;\n    }\n\n    let mut possible_encryption_keys: [Point; N] = [Point::point_at_infinity(); N];\n    for i in 0..N {\n        let bit_limbs = inverse_masking_secrets[i].limbs;\n        // 120, 120, 120\n        let low_120 = bit_limbs[0] as Field;\n        let mid_120 = bit_limbs[1] as Field;\n        let mid_bytes = (mid_120 as Field).to_le_bytes::<15>();\n        let low_128 = low_120 + (mid_bytes[0] as Field) * 0x1000000000000000000000000000000;\n\n        let remainder_mid_112 = (mid_120 - (mid_bytes[0] as Field)) / 0x100;\n\n        let high_16 = bit_limbs[2] as Field;\n\n        let high_128 = remainder_mid_112 + high_16 * 0x10000000000000000000000000000;\n        possible_encryption_keys[i] = multi_scalar_mul(\n            [updated_masking_keys[i]],\n            [EmbeddedCurveScalar::new(low_128, high_128)],\n        );\n    }\n    possible_encryption_keys\n}\n\npub fn create_round_commitments<let NumEntries: u32, let NumParticipants: u32>(\n    user_plaintext: [Field; NumEntries],\n    reveal_vector: [Field; NumEntries],\n    encrypt_secret: Field,\n    masking_secret: Field,\n    round_state: RoundState<NumEntries, NumParticipants>,\n    user_index: u32,\n) -> UserOutputState<NumEntries, NumParticipants> {\n    let mut r: UserOutputState<NumEntries, NumParticipants> = UserOutputState::default();\n    for i in 0..NumParticipants {\n        if (i != user_index) {\n            r.user_updated_mask_commitments[i] = update_mask(\n                round_state.previous_output_states[i].mask_commitments,\n                encrypt_secret,\n            );\n        }\n    }\n    r.ciphertext = commit(user_plaintext, encrypt_secret);\n    r.mask_commitments = commit_mask(reveal_vector, masking_secret);\n    r\n}\n\npub fn consume_round_commitments<let NumEntries: u32, let NumParticipants: u32>(\n    masking_secret: Field,\n    round_state: RoundState<NumEntries, NumParticipants>,\n    user_index: u32,\n) -> [[Option<Field>; NumEntries]; NumParticipants - 1] {\n    let mut count: Field = 0;\n\n    let mut target_plaintexts: [[Option<Field>; NumEntries]; NumParticipants - 1] =\n        [[Option::default(); NumEntries]; NumParticipants - 1];\n    for i in 0..NumParticipants {\n        if (i != user_index) {\n            let decryption_keys = reveal_mask(\n                round_state.previous_output_states[i].user_updated_mask_commitments[user_index],\n                masking_secret,\n            );\n            let plaintexts = trial_decrypt(\n                decryption_keys,\n                round_state.previous_output_states[i].ciphertext,\n            );\n            target_plaintexts[count] = plaintexts;\n            count += 1;\n        }\n    }\n    target_plaintexts\n}\n\nimpl<let NumEntries: u32, let NumParticipants: u32> std::default::Default for RoundState<NumEntries, NumParticipants> {\n    fn default() -> Self {\n        RoundState {\n            round_number: 0,\n            user_encrypt_secret_hashes: [0; NumParticipants],\n            user_mask_secret_hashes: [0; NumParticipants],\n            previous_output_states: [UserOutputState::default(); NumParticipants],\n        }\n    }\n}\nimpl<let NumEntries: u32, let NumParticipants: u32> RoundState<NumEntries, NumParticipants> {\n\n    pub fn hash(self) -> Field {\n        let mut flattened_data: [Field; NumParticipants * 3 + 1] = [0; NumParticipants * 3 + 1];\n\n        for i in 0..NumParticipants {\n            flattened_data[3 * i] = self.user_encrypt_secret_hashes[i];\n            flattened_data[3 * i + 1] = self.user_mask_secret_hashes[i];\n            flattened_data[3 * i + 2] = self.previous_output_states[i].hash();\n        }\n        flattened_data[NumParticipants * 3] = self.round_number as Field - 1;\n\n        std::hash::poseidon2::Poseidon2::hash(flattened_data, NumParticipants * 3 + 1)\n    }\n\n    pub fn update2(\n        self,\n        new_output_state: UserOutputState<NumEntries, NumParticipants>,\n        user_index: u32,\n    ) -> Self {\n        let mut updated = self;\n\n        updated.round_number += 1;\n        updated.previous_output_states[user_index] = new_output_state;\n        updated\n    }\n    pub fn update(\n        self,\n        new_output_states: [UserOutputState<NumEntries, NumParticipants>; NumParticipants],\n    ) -> Self {\n        let mut updated = self;\n\n        updated.round_number += 1;\n        updated.previous_output_states = new_output_states;\n        updated\n    }\n}\n\npub fn execute_round<let NumEntries: u32, let NumParticipants: u32>(\n    user_plaintext: [Field; NumEntries],\n    reveal_vector: [Field; NumEntries],\n    encrypt_secret: Field,\n    masking_secret: Field,\n    round_state: RoundState<NumEntries, NumParticipants>,\n    previous_round_hash: Field,\n    user_index: u32,\n    ) -> (UserOutputState<NumEntries, NumParticipants>, [[Option<Field>; NumEntries]; NumParticipants - 1]) {\n    std::assert_constant(user_index);\n\n    // when used inside a Noir program, previous_round_hash should be sourced from a pub variable\n    assert_eq(previous_round_hash, round_state.hash());\n\n    assert_eq(\n        std::hash::poseidon2::Poseidon2::hash([encrypt_secret, -1], 2),\n        round_state.user_encrypt_secret_hashes[user_index],\n    );\n    assert_eq(\n        std::hash::poseidon2::Poseidon2::hash([masking_secret, -1], 2),\n        round_state.user_mask_secret_hashes[user_index],\n    );\n    let state = create_round_commitments(\n        user_plaintext,\n        reveal_vector,\n        encrypt_secret,\n        masking_secret,\n        round_state,\n        user_index,\n    );\n\n    let plaintexts = consume_round_commitments(masking_secret, round_state, user_index);\n\n    (state, plaintexts)\n}\n\n#[test]\nfn test_execute_round() {\n    let alice_secret = std::hash::poseidon2::Poseidon2::hash([0], 1);\n    let alice_mask = std::hash::poseidon2::Poseidon2::hash([1], 1);\n    let bob_secret = std::hash::poseidon2::Poseidon2::hash([2], 1);\n    let bob_mask = std::hash::poseidon2::Poseidon2::hash([3], 1);\n\n    let round_state: RoundState<4, 2> = RoundState {\n        round_number: 1,\n        user_encrypt_secret_hashes: [\n            poseidon2([alice_secret, -1], 2),\n            poseidon2([bob_secret, -1], 2),\n        ],\n        user_mask_secret_hashes: [poseidon2([alice_mask, -1], 2), poseidon2([bob_mask, -1], 2)],\n        previous_output_states: [UserOutputState::default(); 2],\n    };\n\n    let previous_round_hash = round_state.hash();\n    let alice_state = [0, 1, 2, 3];\n    let alice_reveal = [0, 1, 0, 1];\n    let bob_state = [-1, -2, -3, -4];\n    let bob_reveal = [1, 0, 1, 0];\n\n    // after executing. we have ciphertexts and mask commitments, but no mask reveal commitments\n    let alice_output = execute_round(\n        alice_state,\n        alice_reveal,\n        alice_secret,\n        alice_mask,\n        round_state,\n        previous_round_hash,\n        0,\n    );\n\n    let round_state = round_state.update([alice_output.0, round_state.previous_output_states[1]]);\n    let previous_round_hash = round_state.hash();\n\n    let bob_output = execute_round(\n        bob_state,\n        bob_reveal,\n        bob_secret,\n        bob_mask,\n        round_state,\n        previous_round_hash,\n        1,\n    );\n\n    let round_state = round_state.update([round_state.previous_output_states[0], bob_output.0]);\n    let previous_round_hash = round_state.hash();\n\n    let alice_output = execute_round(\n        alice_state,\n        alice_reveal,\n        alice_secret,\n        alice_mask,\n        round_state,\n        previous_round_hash,\n        0,\n    );\n\n    let round_state = round_state.update([alice_output.0, round_state.previous_output_states[1]]);\n    let previous_round_hash = round_state.hash();\n\n    let bob_output = execute_round(\n        bob_state,\n        bob_reveal,\n        bob_secret,\n        bob_mask,\n        round_state,\n        previous_round_hash,\n        1,\n    );\n\n    let alice_decrypted = alice_output.1[0];\n    let bob_decrypted = bob_output.1[0];\n\n    assert_eq(alice_decrypted[0].is_some(), false);\n    assert_eq(alice_decrypted[1].is_some(), true);\n    assert_eq(alice_decrypted[2].is_some(), false);\n    assert_eq(alice_decrypted[3].is_some(), true);\n\n    assert_eq(alice_decrypted[1].unwrap_unchecked(), -2);\n    assert_eq(alice_decrypted[3].unwrap_unchecked(), -4);\n\n    assert_eq(bob_decrypted[0].is_some(), true);\n    assert_eq(bob_decrypted[1].is_some(), false);\n    assert_eq(bob_decrypted[2].is_some(), true);\n    assert_eq(bob_decrypted[3].is_some(), false);\n\n    assert_eq(bob_decrypted[0].unwrap_unchecked(), 0);\n    assert_eq(bob_decrypted[2].unwrap_unchecked(), 2);\n}\n\n/// This doesn't really do anything by ensures that there is a test for CI to run.\n#[test]\nfn smoke_test() {\n    let plaintext: [Field; 3] = [0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 123, -1];\n    let bob_reveal_vector: [Field; 3] = [0, 1, 1];\n\n    let alice_encrypt_secret: Field = std::hash::poseidon2::Poseidon2::hash([0], 1);\n\n    let bob_masking_secret: Field = std::hash::poseidon2::Poseidon2::hash([2], 1);\n\n    // Round 1a: Alice generates the ciphertext that describes her hidden state, sends to Bob\n    let ciphertext = commit(plaintext, alice_encrypt_secret);\n\n    // Round 1b: Bob generates commitment mask that describes which parts of the state he is entitled to see, sends to Alice\n    let bob_masking_keys = commit_mask(bob_reveal_vector, bob_masking_secret);\n\n    // Round 2: Alice uses Bob's commitment mask to create a hidden version of her encryption keys, sends to Bob\n    let alice_masking_update = update_mask(bob_masking_keys, alice_encrypt_secret);\n\n    // Round 3: Bob removes his masking component from Alice's updated mask to produce partial decryption keys\n    let partial_decrypt_keys = reveal_mask(alice_masking_update, bob_masking_secret);\n\n    // (still round 3): Bob uses the partial decryption keys to decrypt the part of Alice's state he is entitled to see\n    let partial_plaintext = trial_decrypt(partial_decrypt_keys, ciphertext);\n\n    assert_eq(partial_plaintext[0].is_some(), false);\n    assert_eq(partial_plaintext[1].is_some(), true);\n    assert_eq(partial_plaintext[2].is_some(), true);\n\n    assert_eq(partial_plaintext[1].unwrap_unchecked(), 123);\n    assert_eq(partial_plaintext[2].unwrap_unchecked(), -1);\n}\n","path":"/Users/lago/nargo/github.com/zac-williamson/mpclib/main/src/selective_disclosure/selective_disclosure.nr"},"79":{"source":"use crate::utils::map::map;\nuse std::cmp::Ordering;\n\nuse crate::params::BigNumParamsGetter;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, cmp, conditional_select, derive_from_seed, div, eq, from_field,\n        is_zero, limbs_to_field, mul, neg, sub, udiv, udiv_mod, umod, validate_in_field,\n        validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct BigNum<let N: u32, let MOD_BITS: u32, Params> {\n    pub limbs: [u128; N],\n}\n// We aim to avoid needing to add a generic parameter to this trait, for this reason we do not allow\n// accessing the limbs of the bignum except through slices.\npub trait BigNumTrait: Neg + Add + Sub + Mul + Div + Eq {\n    // TODO: this crashes the compiler? v0.32\n    // fn default() -> Self { std::default::Default::default  () }\n    fn new() -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn derive_from_seed<let SeedBytes: u32>(seed: [u8; SeedBytes]) -> Self;\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(seed: [u8; SeedBytes]) -> Self;\n    fn from_slice(limbs: [u128]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    fn modulus() -> Self;\n    fn modulus_bits(self) -> u32;\n    fn num_limbs(self) -> u32;\n    fn get_limbs_slice(self) -> [u128];\n    fn get_limb(self, idx: u32) -> u128;\n    fn set_limb(&mut self, idx: u32, value: u128);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    unconstrained fn __neg(self) -> Self;\n    unconstrained fn __add(self, other: Self) -> Self;\n    unconstrained fn __sub(self, other: Self) -> Self;\n    unconstrained fn __mul(self, other: Self) -> Self;\n    unconstrained fn __div(self, other: Self) -> Self;\n    unconstrained fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    unconstrained fn __invmod(self) -> Self;\n    unconstrained fn __pow(self, exponent: Self) -> Self;\n\n    unconstrained fn __batch_invert<let M: u32>(to_invert: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    unconstrained fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    unconstrained fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        lhs: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        add: [Self; ADD_N],\n        add_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        lhs: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        add: [Self; ADD_N],\n        add_flags: [bool; ADD_N],\n    );\n\n    fn assert_is_not_equal(self, other: Self);\n    fn validate_in_range(self);\n    fn validate_in_field(self);\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self);\n    fn udiv(self, divisor: Self) -> Self;\n    fn umod(self, divisor: Self) -> Self;\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::convert::From<Field> for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    fn from(input: Field) -> Self {\n        Self { limbs: from_field::<N, MOD_BITS>(input) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> Neg for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    fn neg(self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> BigNumTrait for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n\n    #[deprecated(\"`BigNum::zero()` is preferred\")]\n    fn new() -> Self {\n        Self::zero()\n    }\n\n    fn zero() -> Self {\n        Self { limbs: [0; N] }\n    }\n\n    fn one() -> Self {\n        let mut result = BigNum::zero();\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(seed: [u8; SeedBytes]) -> Self {\n        let params = Params::get_params();\n        Self { limbs: derive_from_seed::<_, MOD_BITS, _>(params, seed) }\n    }\n\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(seed: [u8; SeedBytes]) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __derive_from_seed::<_, MOD_BITS, _>(params, seed) }\n    }\n\n    fn from_slice(limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array() }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x) }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus() -> Self {\n        Self { limbs: Params::get_params().modulus }\n    }\n\n    fn modulus_bits(_: Self) -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs(_: Self) -> u32 {\n        N\n    }\n\n    fn get_limbs_slice(self) -> [u128] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    unconstrained fn __neg(self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __neg(params, self.limbs) }\n    }\n\n    unconstrained fn __add(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __add(params, self.limbs, other.limbs) }\n    }\n\n    unconstrained fn __sub(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __sub(params, self.limbs, other.limbs) }\n    }\n\n    unconstrained fn __mul(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) }\n    }\n\n    unconstrained fn __div(self, divisor: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) }\n    }\n\n    unconstrained fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let (q, r) = __udiv_mod(self.limbs, divisor.limbs);\n        (Self { limbs: q }, Self { limbs: r })\n    }\n\n    unconstrained fn __invmod(self) -> Self {\n        let params = Params::get_params();\n        assert(params.has_multiplicative_inverse);\n        Self { limbs: __invmod::<_, MOD_BITS>(params, self.limbs) }\n    }\n\n    unconstrained fn __pow(self, exponent: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) }\n    }\n\n    unconstrained fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = Params::get_params();\n        assert(params.has_multiplicative_inverse);\n        __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn: Self| bn.limbs)).map(|limbs| {\n            Self { limbs }\n        })\n    }\n\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = Params::get_params();\n        assert(params.has_multiplicative_inverse);\n        __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn: Self| bn.limbs)).map(|limbs| {\n            Self { limbs }\n        })\n    }\n\n    unconstrained fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = Params::get_params();\n        let maybe_limbs = __tonelli_shanks_sqrt(params, self.limbs);\n        maybe_limbs.map(|limbs| Self { limbs })\n    }\n\n    unconstrained fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let params = Params::get_params();\n        let (q_limbs, r_limbs) = __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn: Self| bn.limbs)),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn: Self| bn.limbs)),\n            rhs_flags,\n            map(linear_terms, |bn: Self| bn.limbs),\n            linear_flags,\n        );\n        (Self { limbs: q_limbs }, Self { limbs: r_limbs })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        let params = Params::get_params();\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn: Self| bn.limbs)),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn: Self| bn.limbs)),\n            rhs_flags,\n            map(linear_terms, |bn: Self| bn.limbs),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = Params::get_params();\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = Params::get_params();\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = Params::get_params();\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q }, Self { limbs: r })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs) }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs) }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate) }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> Default for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    fn default() -> Self {\n        Self::zero()\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::ops::Add for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::ops::Sub for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::ops::Mul for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::ops::Div for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, other: Self) -> Self {\n        let params = Params::get_params();\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, other.limbs) }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::cmp::Eq for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    fn eq(self, other: Self) -> bool {\n        let params = Params::get_params();\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32, Params> std::cmp::Ord for BigNum<N, MOD_BITS, Params>\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        cmp::<_, MOD_BITS>(self.limbs, other.limbs)\n    }\n}\n\n/// `to_field` converts a BigNum to a Field, conditioned on the bignum fitting in a field element\n///\n/// we have opted to not add this to the BigNumTrait as it might lead to bad usage of it\n/// i.e. using this function with modulus larger than the Grumpkin modulus would lead to runtime errors, if the bignum is not deliberately picked to be in range, e.g. the bignum is the output of a hash function.\n/// for such use cases we advise developers to use comptime assertions to ensure the modulus is not larger than the Grumpkin modulus\npub fn to_field<let N: u32, let MOD_BITS: u32, Params>(input: BigNum<N, MOD_BITS, Params>) -> Field\nwhere\n    Params: BigNumParamsGetter<N, MOD_BITS>,\n{\n    limbs_to_field(Params::get_params(), input.limbs)\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/bignum.nr"},"111":{"source":"use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\nuse std::cmp::Ordering;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n * gt \n * check_gt_with_flags\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (underflow, result, carry_flags, borrow_flags) =\n        unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n    assert(!underflow, \"BigNum::validate_gt check fails\");\n    check_gt_with_flags::<N, MOD_BITS>(lhs, rhs, result, borrow_flags, carry_flags);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n\n// a comparison function. returns true if lhs > rhs and false otherwise\npub(crate) fn cmp<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) -> Ordering {\n    let (underflow, result, carry_flags, borrow_flags) =\n        unsafe { __validate_gt_remainder(lhs, rhs) };\n    // if underflow is true, swap lhs and rhs\n    let (lhs, rhs) = if underflow { (rhs, lhs) } else { (lhs, rhs) };\n    check_gt_with_flags::<N, MOD_BITS>(lhs, rhs, result, borrow_flags, carry_flags);\n    if lhs == rhs {\n        Ordering::equal()\n    } else if underflow {\n        Ordering::less()\n    } else {\n        Ordering::greater()\n    }\n}\n\n// the constraining function for the results returned by __validate_gt_remainder. this is used in both comparisons and validate gt\npub(crate) fn check_gt_with_flags<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    result: [u128; N],\n    borrow_flags: [bool; N],\n    carry_flags: [bool; N],\n) {\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i] as Field\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1] as Field\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/constrained_ops.nr"},"112":{"source":"use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N - 2]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N - 2] = [0; 2 * N - 2];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N - 2]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/expressions.nr"},"115":{"source":"use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> (bool, [u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n\n    let mut result: [u128; N] = [0; N];\n    // swap a and b if there's an underflow\n    let (a, b) = if underflow { (b, a) } else { (a, b) };\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (underflow, result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N - 1]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        if (i < N - 1) {\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N - 1], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            if (i < N - 1) {\n                borrow_flags[i] = borrow as bool;\n            }\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N - 1], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N - 1] = [false; N - 1];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            if (i < N - 1) {\n                borrow_flags[i] = borrow as bool;\n            }\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/unconstrained_helpers.nr"},"116":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/fns/unconstrained_ops.nr"},"126":{"source":"use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/lago/nargo/github.com/noir-lang/noir-bignum/v0.6.1/src/utils/split_bits.nr"}},"names":["consume_global_state_and_update_local_view"],"brillig_names":["__from_field","__validate_gt_remainder","__div","__compute_quadratic_expression_with_borrow_flags","directive_invert","directive_to_radix","directive_integer_quotient"]}