{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":18242183730999201571,"abi":{"parameters":[{"name":"player_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"encrypt_secret","type":{"kind":"field"},"visibility":"private"},{"name":"mask_secret","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"UserState","fields":[{"name":"my_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"private_info","type":{"kind":"struct","path":"player_state::PlayerPrivateInfo","fields":[{"name":"role","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"voted_for_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"all_players_public_view","type":{"kind":"array","length":3,"type":{"kind":"struct","path":"player_state::PlayerPublicInfo","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"game_player_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"status","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"section_id","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"visible_sections","type":{"kind":"array","length":9,"type":{"kind":"integer","sign":"unsigned","width":32}}}]},"visibility":"private"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"","debug_symbols":"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","file_map":{"61":{"source":"use dep::std;\nuse std::hash::poseidon2::Poseidon2;\n\n// Use specific imports from mpclib\nuse mpclib::selective_disclosure::selective_disclosure::{\n    consume_round_commitments, create_round_commitments, RoundState, UserOutputState,\n};\n\n// Declare core modules for Among Us game\nmod player_state;\nmod validate_move;\nmod update_vision;\n// mod api; // Comment out if moving logic directly here\n\n// Re-export necessary items for use within the crate (e.g., in api.nr) or potentially externally\n// Ensure items being re-exported are marked `pub` in their respective modules\npub use player_state::{ PlayerPublicInfo, PlayerPrivateInfo };\npub use player_state::{ MAP_SIZE, NUM_PLAYERS, MAX_VISIBLE_SECTIONS }; \npub use player_state::{ ROLE_CREW, ROLE_IMPOSTER, STATUS_ALIVE, STATUS_DEAD }; // Re-export constants\npub use validate_move::validate_adjacent_move;\npub use update_vision::calculate_visible_sections;\n\n// Keep API re-export separate if preferred\n// pub use api::{*}; // Removed wildcard export - access via api::function_name\n\n// Placeholder example function (remove or move later)\n// fn example_move_proof(...) -> UserState { ... }\n\n// NOTE: Old chess-specific code, structs (GameState, MoveHashes, etc.) \n// and functions (move, consume_opponent_move_and_update_game_state, commit_to_user_secrets)\n// defined directly in the old lib.nr have been removed.\n// Their equivalents should be defined within the `api` module, \n// using the new structs and functions from player_state, validate_move, update_vision.\n\n// --- Core Types (Mirrors fog_of_war_chess structure) ---\n\ntype RoundMpcState = RoundState<64, NUM_PLAYERS>;\npub struct GameState {\n    pub game_ended: bool, // Or maybe an enum: Ongoing, CrewWin, ImposterWin\n    pub turn_count: u32, \n    // Store the public state of all players\n    pub all_players_public: [PlayerPublicInfo; NUM_PLAYERS],\n    // Add other global state: e.g., emergency meeting status, task progress?\n    pub mpc_state: RoundMpcState, // Re-add MPC state\n}\n\nimpl std::default::Default for GameState {\n    fn default() -> Self {\n        let mut players = [PlayerPublicInfo::default(); NUM_PLAYERS];\n        for i in 0..NUM_PLAYERS {\n            players[i].game_player_index = i;\n            // Role assignment removed - Roles are private now\n            // Actual roles will be determined during initialization (e.g., via shuffle or predetermined secret)\n            players[i].section_id = 36; // Example start section\n            players[i].status = STATUS_ALIVE; \n            players[i].player_id = i as Field; \n        }\n        GameState { \n            game_ended: false, \n            turn_count: 0, \n            all_players_public: players,\n            mpc_state: RoundMpcState::default() \n        }\n    }\n}\n\n// Add commit_to_user_secrets based on user example\nimpl GameState {\n    // Use mpc_state.hash() as confirmed from mpclib source\n    pub fn hash(self) -> Field {\n        self.mpc_state.hash() \n    }\n\n    // #[export] // Cannot export from impl block\n    // Internal logic for committing secrets\n    fn commit_secrets_logic(\n        mut self, \n        encrypt_secret: Field,\n        mask_secret: Field,\n        player_index: u32,\n    ) -> GameState {\n        let encrypt_buffer = [encrypt_secret];\n        let encrypt_hash = Poseidon2::hash(encrypt_buffer, 1);\n        let mask_buffer = [mask_secret];\n        let mask_hash = Poseidon2::hash(mask_buffer, 1);\n        self.mpc_state.user_encrypt_secret_hashes[player_index] = encrypt_hash;\n        self.mpc_state.user_mask_secret_hashes[player_index] = mask_hash;\n        self \n    }\n}\n\n// Standalone exported function to commit secrets (mirrors internal logic)\n#[export]\npub fn commit_to_user_secrets(\n    game_state: GameState, \n    encrypt_secret: Field,\n    mask_secret: Field,\n    player_index: u32,\n) -> GameState {\n    // Call the internal logic\n    game_state.commit_secrets_logic(encrypt_secret, mask_secret, player_index)\n}\n\n// Adapted MoveData for Among Us\npub struct MoveData {\n    pub target_section: u32,\n}\n\n// Adapted UserState for Among Us (uses internal modules)\npub struct UserState {\n     pub my_player_index: u32, \n     pub private_info: PlayerPrivateInfo, // Now includes role\n     pub encrypt_secret: Field, // Add secret for MPC\n     pub mask_secret: Field,    // Add secret for MPC\n     // Player's view of the public state (might differ from global GameState due to visibility)\n     pub all_players_public_view: [PlayerPublicInfo; NUM_PLAYERS], \n     pub visible_sections: [u32; MAX_VISIBLE_SECTIONS], \n     // Maybe add: pub task_list: ..., pub kill_cooldown: ...\n}\n\n// Default UserState needs careful initialization based on player index\nimpl std::default::Default for UserState {\n     fn default() -> Self {\n         // Default state is somewhat meaningless without a player index context\n         // initialize_user_state function is better.\n         let invalid_section_sentinel: u32 = MAP_SIZE * MAP_SIZE; \n         let default_visible = [invalid_section_sentinel; MAX_VISIBLE_SECTIONS]; \n         UserState {\n             my_player_index: NUM_PLAYERS, // Sentinel for invalid/default\n             private_info: PlayerPrivateInfo::default(),\n             encrypt_secret: 0, // Default secret (should be replaced)\n             mask_secret: 0,    // Default secret (should be replaced)\n             all_players_public_view: [PlayerPublicInfo::default(); NUM_PLAYERS],\n             visible_sections: default_visible,\n         }\n     }\n}\n\n// Add an encode method to UserState\nimpl UserState {\n    // Encodes the player's view of everyone's public state (section and status)\n    // into a [Field; 64] buffer for commitment.\n    // Player i's section_id maps to index 2*i\n    // Player i's status maps to index 2*i + 1\n    // Pass self by value as workaround for ownership flag issue\n    pub fn encode_state_for_commitment(self) -> [Field; 64] {\n        let mut encoded = [0; 64];\n        // Ensure we don't write past the buffer if NUM_PLAYERS > 32\n        let max_players_to_encode = if NUM_PLAYERS * 2 > 64 { 32 } else { NUM_PLAYERS };\n\n        for i in 0..max_players_to_encode {\n            // Encode section_id for player i at index 2*i\n            encoded[2 * i] = self.all_players_public_view[i].section_id as Field;\n            // Encode status for player i at index 2*i + 1\n            encoded[2 * i + 1] = self.all_players_public_view[i].status as Field;\n            // Role is private and not encoded here.\n            // Player ID is implicitly known by index.\n        }\n        // Indices from max_players_to_encode*2 up to 63 remain 0.\n        encoded\n    }\n}\n\n// Adapted MoveHashes\npub struct MoveHashes {\n    pub input_game_state_hash: Field, // Hash of GameState before move\n    pub input_user_state_hash: Field, // Hash of UserState before move\n    pub output_game_state_hash: Field, // Hash of GameState after move\n    pub output_user_state_hash: Field, // Hash of UserState after move\n}\n\nimpl std::default::Default for MoveHashes {\n    fn default() -> Self {\n        MoveHashes {\n            input_game_state_hash: 0,\n            input_user_state_hash: 0,\n            output_game_state_hash: 0,\n            output_user_state_hash: 0,\n        }\n    }\n}\n\n// --- Core Functions (Mirrors fog_of_war_chess structure) ---\n\n// Public move function: takes current state, user state, move data, and player index\n// Returns the new global state and relevant hashes\n#[export]\npub fn move(\n    input_state: GameState,    // Changed: Removed 'mut', renamed to input_state\n    user_state: UserState,\n    move_data: MoveData\n) -> (GameState, MoveHashes) { // Return type remains the same\n\n    let player_index = user_state.my_player_index;\n    // Calculate input hashes\n    let input_game_state_hash = input_state.hash();\n    // Placeholder for user state hash calculation\n    let input_user_state_buffer = [user_state.private_info.encrypt_secret, user_state.private_info.mask_secret];\n    let input_user_state_hash = Poseidon2::hash(input_user_state_buffer, 2);\n\n    // 1. Assertions and Pre-conditions\n    assert_eq(input_state.game_ended, false, \"Game already ended\");\n    //assert_eq(user_state.my_player_index, player_index, \"UserState does not match player_index\");\n    // Ensure the player making the move is alive in their own view\n    let my_public_info_view = user_state.all_players_public_view[player_index];\n    assert(my_public_info_view.status == STATUS_ALIVE, \"Cannot move when dead\"); // Check against constant\n\n    // 2. Validate Move Legality (using internal module)\n    let current_section = my_public_info_view.section_id;\n    let target_section = move_data.target_section;\n    let is_valid = validate_adjacent_move(current_section, target_section, MAP_SIZE); // Re-use validation\n    assert(is_valid, \"Invalid move: Target section not adjacent\"); // Assert the result\n\n    // 3. Calculate *Intended* Next Player State (for commitment)\n    // This calculates what the user_state *would* look like after the move,\n    // primarily for determining visibility for the commitment mask.\n    // It does NOT modify the input user_state.\n    let mut intended_next_user_state = user_state; // Start with current state\n    intended_next_user_state.all_players_public_view[player_index].section_id = target_section; // Update position\n    intended_next_user_state.visible_sections = calculate_visible_sections(target_section, MAP_SIZE); // Update vision\n\n    // 4. Prepare MPC Commitment Data\n    // Encode the player's *intended* view of the public state after the move\n    let encoded_state_to_commit: [Field; 64] = intended_next_user_state.encode_state_for_commitment();\n\n    // Create visibility mask based on the *intended* post-move state\n    let mut visibility_fields: [Field; 64] = [0; 64]; // 0 = hide, 1 = reveal\n    for i in 0..NUM_PLAYERS { // Iterate through all players (global indices)\n        let opponent_global_index = i;\n        let opponent_section = intended_next_user_state.all_players_public_view[opponent_global_index].section_id;\n        let mut opponent_is_visible = false;\n        for j in 0..MAX_VISIBLE_SECTIONS {\n            if intended_next_user_state.visible_sections[j] == opponent_section {\n                opponent_is_visible = true;\n            }\n        }\n\n        // If the opponent is visible *or* if it's the player themselves, mark their fields revealable\n        if opponent_is_visible | (opponent_global_index == player_index) {\n             // Mark section_id (index 2*i) and status (index 2*i + 1) as revealable\n            visibility_fields[2 * opponent_global_index] = 1;\n            visibility_fields[2 * opponent_global_index + 1] = 1;\n        }\n    }\n    // Ensure player always reveals their own info\n    if player_index < NUM_PLAYERS { // Basic bounds check\n        visibility_fields[2 * player_index] = 1;     // Reveal own section\n        visibility_fields[2 * player_index + 1] = 1; // Reveal own status\n    }\n\n    // 5. Create MPC Commitments\n    let mut output_commitments: UserOutputState<64, NUM_PLAYERS> = create_round_commitments(\n        encoded_state_to_commit,\n        visibility_fields,\n        user_state.private_info.encrypt_secret, // Use secrets from the *input* user_state\n        user_state.private_info.mask_secret,\n        input_state.mpc_state, // Pass the *immutable* input mpc_state\n        player_index\n    );\n\n    // 6. Calculate the next MPC state using the input state's mpc_state\n    let mut output_mpc_state = input_state.mpc_state;\n    //.update2(output_commitments, player_index);\n\n    output_mpc_state.round_number += 1;\n    output_mpc_state.previous_output_states[player_index] = output_commitments;\n\n    // 7. Create the output GameState\n    // Create a mutable copy of the public player info to update it\n    let mut updated_all_players_public = input_state.all_players_public;\n    updated_all_players_public[player_index].section_id = target_section;\n\n    let output_game_state = GameState {\n        all_players_public: updated_all_players_public, // Use the updated copy\n        game_ended: input_state.game_ended, // For now, assume move doesn't end game\n        mpc_state: output_mpc_state,        // Use the newly calculated MPC state\n        turn_count: input_state.turn_count + 1, // Increment turn count\n    };\n\n    // 8. Calculate Output Hashes\n    let output_game_state_hash = output_game_state.hash();\n    // User state hash should reflect the state *before* consumption,\n    // which is encoded in `encoded_state_to_commit`.\n    let output_user_state_hash = Poseidon2::hash(encoded_state_to_commit, encoded_state_to_commit.len());\n\n    // 9. Return updated global state and hashes\n    let move_hashes = MoveHashes {\n        input_game_state_hash: input_game_state_hash,\n        input_user_state_hash: input_user_state_hash, // Hash of input user state secrets\n        output_game_state_hash: output_game_state_hash, // Hash of the new game state\n        output_user_state_hash: output_user_state_hash, // Hash of the committed user view\n    };\n\n    (output_game_state, move_hashes)\n}\n\n// Initializer for GameState\n#[export]\npub fn empty_game_state() -> GameState {\n     GameState::default() // IMPLICIT return\n}\n\n// Initializer for UserState\n#[export]\npub fn initialize_user_state(player_index: u32, encrypt_secret: Field, mask_secret: Field) -> UserState {\n    let my_role = if player_index < 2 { ROLE_IMPOSTER } else { ROLE_CREW };\n    let initial_global_state = GameState::default();\n    let my_start_section = initial_global_state.all_players_public[player_index].section_id;\n    let initial_visible_sections = calculate_visible_sections(my_start_section, MAP_SIZE);\n    let mut initial_view = [PlayerPublicInfo::default(); NUM_PLAYERS];\n    \n    for i in 0..NUM_PLAYERS {\n        let other_player_global_info = initial_global_state.all_players_public[i];\n        let other_player_section = other_player_global_info.section_id;\n        let mut player_can_be_seen = false; \n        for j in 0..MAX_VISIBLE_SECTIONS {\n             if initial_visible_sections[j] == other_player_section {\n                 player_can_be_seen = true;\n             }\n        }\n\n        if i == player_index {\n            initial_view[i] = other_player_global_info;\n        } else { \n            if player_can_be_seen {\n                 initial_view[i] = other_player_global_info;\n            } else {\n                let mut masked_info = PlayerPublicInfo::default();\n                masked_info.game_player_index = i; \n                masked_info.section_id = MAP_SIZE * MAP_SIZE; \n                masked_info.status = other_player_global_info.status; \n                initial_view[i] = masked_info; \n            }\n        }\n    }\n\n    let user_state = UserState {\n        my_player_index: player_index,\n        private_info: PlayerPrivateInfo { \n            role: my_role, \n            encrypt_secret: encrypt_secret, \n            mask_secret: mask_secret, \n            voted_for_index: NUM_PLAYERS \n        },\n        encrypt_secret: encrypt_secret, \n        mask_secret: mask_secret,\n        all_players_public_view: initial_view, \n        visible_sections: initial_visible_sections,\n    };\n    \n     user_state \n}\n\n// Function to update a player's local UserState based on the global GameState's MPC commitments\n#[export]\npub fn consume_global_state_and_update_local_view(\n    current_local_user_state: UserState, \n    global_game_state: GameState,      \n) -> UserState {                        \n\n    let my_player_index = current_local_user_state.my_player_index;\n\n    // --- Consume Commitments --- \n    let revealed_state_data_nested: [[Option<Field>; 64]; NUM_PLAYERS - 1] = consume_round_commitments(\n        current_local_user_state.mask_secret, \n        global_game_state.mpc_state,             \n        my_player_index \n    );\n\n    // --- Update View --- \n    let mut updated_user_state = current_local_user_state;\n    \n    // Keep track of which opponent index maps to which nested array index\n    let mut opponent_array_index = 0; \n\n    for opponent_global_index in 0..NUM_PLAYERS {\n        if opponent_global_index != my_player_index {\n            // Get the revealed Option<Field> array for this specific opponent\n            let revealed_opponent_options: [Option<Field>; 64] = revealed_state_data_nested[opponent_array_index];\n            \n            // Get a mutable reference to our current view of this opponent\n            let mut current_opponent_view = updated_user_state.all_players_public_view[opponent_global_index];\n\n            // Decode revealed section_id (encoded at index 2 * opponent_global_index)\n            let section_index = 2 * opponent_global_index;\n            if section_index < 64 { // Bounds check\n                if revealed_opponent_options[section_index].is_some() {\n                    // Revealed: Update section_id in our view\n                    current_opponent_view.section_id = revealed_opponent_options[section_index].unwrap_unchecked() as u32;\n                } // else: Not revealed, keep existing section_id view (potentially masked/stale)\n            }\n\n            // Decode status (encoded at index 2 * opponent_global_index + 1)\n            let status_index = section_index + 1;\n            if status_index < 64 { // Bounds check\n                if revealed_opponent_options[status_index].is_some() {\n                    // Revealed: Update status in our view\n                    current_opponent_view.status = revealed_opponent_options[status_index].unwrap_unchecked() as u32;\n                } // else: Not revealed, keep existing status view (potentially masked/stale)\n            }\n\n            // NOTE: Other fields (indices not 2*i or 2*i+1) were not encoded in the first place,\n            // so we don't need to decode them.\n\n            // --- Update the main view array with the potentially updated opponent view ---\n            updated_user_state.all_players_public_view[opponent_global_index] = current_opponent_view;\n            \n            // Increment index for the revealed_state_data_nested array\n            opponent_array_index += 1;\n        }\n    }\n\n    // --- Update Our Own Public View Info ---\n    // Ensure our own view reflects the latest public global state for ourselves,\n    // as our state isn't revealed via consume_round_commitments.\n    updated_user_state.all_players_public_view[my_player_index] = global_game_state.all_players_public[my_player_index];\n\n    // --- Recalculate Visibility --- \n    let my_updated_section = updated_user_state.all_players_public_view[my_player_index].section_id;\n    updated_user_state.visible_sections = calculate_visible_sections(my_updated_section, MAP_SIZE);\n\n    // --- Optional: Re-masking based on new visibility (can be complex) ---\n    // This logic might be needed if players can move *out* of view and their info should be hidden again.\n    // For now, we rely on the initial decoding providing the correct visible state.\n\n    // --- Return Updated State --- \n    updated_user_state \n}\n","path":"/Users/lago/Desktop/joaolago1113/fogofwarr/zk_amongus/src/lib.nr"},"63":{"source":"use crate::player_state::{MAP_SIZE, MAX_VISIBLE_SECTIONS, NUM_PLAYERS};\nuse dep::std;\n\n// Calculates the set of visible sections for a player based on simple adjacency.\n// Includes the player's own section.\n// Returns an array of size MAX_VISIBLE_SECTIONS, padded with invalid_section_sentinel for invalid/out-of-bounds sections.\npub fn calculate_visible_sections(\n    player_section: u32, \n    map_size: u32\n) -> [u32; MAX_VISIBLE_SECTIONS] {\n    \n    let invalid_section_sentinel: u32 = map_size * map_size; // Use same sentinel as default\n    let mut visible_sections = [invalid_section_sentinel; MAX_VISIBLE_SECTIONS];\n    let mut visible_count: u32 = 0; \n\n    let player_x: u32 = player_section % map_size;\n    let player_y: u32 = player_section / map_size;\n\n    // Iterate through the 3x3 grid centered on the player\n    for y_offset_idx in 0..3 { // y_offset = -1, 0, 1 maps to index 0, 1, 2\n        for x_offset_idx in 0..3 { // x_offset = -1, 0, 1 maps to index 0, 1, 2\n            let y_offset: i64 = (y_offset_idx as i64) - 1;\n            let x_offset: i64 = (x_offset_idx as i64) - 1;\n\n            let current_x_signed: i64 = (player_x as i64) + x_offset;\n            let current_y_signed: i64 = (player_y as i64) + y_offset;\n\n            // Boundary checks\n            if current_x_signed >= 0 & current_x_signed < (map_size as i64) & \n               current_y_signed >= 0 & current_y_signed < (map_size as i64) \n            {\n                // Convert back to u32 if within bounds\n                let current_x = current_x_signed as u32;\n                let current_y = current_y_signed as u32;\n                let section_id = current_y * map_size + current_x;\n                \n                // Add to visible sections if there's space\n                if visible_count < MAX_VISIBLE_SECTIONS {\n                    visible_sections[visible_count] = section_id;\n                    visible_count = visible_count + 1;\n                }\n            }\n        }\n    }\n\n    visible_sections\n}\n\n// Test case (replace old ones)\n#[test]\nfn test_visibility_center() {\n    let map_s: u32 = 8;\n    let invalid_sentinel: u32 = map_s * map_s;\n    // Center section for 8x8 is 27 (3,3) or 36 (4,4). Let's use 36.\n    let center_section: u32 = (map_s / 2) * map_s + (map_s / 2);\n    let visible = calculate_visible_sections(center_section, map_s);\n    \n    // Expected sections for center (4,4) are: 27, 28, 29, 35, 36, 37, 43, 44, 45\n    let expected = [27, 28, 29, 35, 36, 37, 43, 44, 45];\n    let mut count = 0;\n    for i in 0..MAX_VISIBLE_SECTIONS {\n        if visible[i] != invalid_sentinel { // Use sentinel for check\n            let mut found = false;\n            for j in 0..expected.len() {\n                if visible[i] == expected[j] {\n                    found = true;\n                }\n            }\n            // Check after inner loop completes\n            assert(found, \"Visible section not in expected list\");\n            count += 1;\n        }\n    }\n    assert(count == expected.len(), \"Incorrect number of visible sections\");\n}\n\n#[test]\nfn test_visibility_corner() {\n    let map_s: u32 = 8;\n    let invalid_sentinel: u32 = map_s * map_s;\n    let corner_section: u32 = 0; // Top-left corner (0,0)\n    let visible = calculate_visible_sections(corner_section, map_s);\n    \n    // Expected sections for corner (0,0) are: 0, 1, 8, 9\n    let expected = [0, 1, 8, 9];\n    let mut count = 0;\n    let mut sorted_visible = [invalid_sentinel; MAX_VISIBLE_SECTIONS]; // Use sentinel\n    let mut k: u32 = 0; // Ensure k is u32\n\n    // Collect valid visible sections\n    for i in 0..MAX_VISIBLE_SECTIONS {\n         if visible[i] != invalid_sentinel { // Use sentinel\n             assert(k < MAX_VISIBLE_SECTIONS, \"Exceeded visible section buffer\"); // Safety check\n             sorted_visible[k] = visible[i];\n             k += 1;\n         }\n    }\n     // Basic check for count and presence\n     assert(k == (expected.len() as u32), \"Incorrect number of visible sections for corner\");\n     for i in 0..expected.len() {\n         let mut found = false;\n         for j in 0..k {\n             if sorted_visible[j] == expected[i] {\n                 found = true;\n             }\n         }\n         // Check after inner loop completes\n         assert(found, \"Expected corner section not found\");\n     }\n}\n\n// Remove old chess vision functions and tests\n// pub(crate) fn update_vision(...) { ... }\n// fn update_vision_for_pawn(...) { ... }\n// #[test] fn test_piece_data() { ... }\n","path":"/Users/lago/Desktop/joaolago1113/fogofwarr/zk_amongus/src/update_vision.nr"}},"names":["initialize_user_state"],"brillig_names":["directive_integer_quotient","directive_invert"]}